namespace CreateReportWithValidIpAddresses
{
    using System;
    using System.Linq;
    using System.Net;

    using NetTools;

    internal class Startup
    {
        private static void Main()
        {
            const string AllCountriesString =
                "AFGHANISTAN,ALBANIA,ALGERIA,AMERICAN SAMOA,ANDORRA,ANGOLA,ANGUILLA,ANTIGUA AND BARBUDA,ARGENTINA,ARMENIA,ARUBA,AUSTRALIA,AUSTRIA,AZERBAIJAN,BAHAMAS,BAHRAIN,BANGLADESH,BARBADOS,BELARUS,BELGIUM,BELIZE,BENIN,BERMUDA,BHUTAN,BOLIVIA,BONAIRE,SINT EUSTATIUS,SABA,BOSNIA AND HERZEGOWINA,BOTSWANA,BRAZIL,BRITISH INDIAN OCEAN TERRITORY,BRUNEI DARUSSALAM,BULGARIA,BURKINA FASO,BURUNDI,CAMBODIA,CAMEROON,CANADA,CAPE VERDE,CAYMAN ISLANDS,CENTRAL AFRICAN REPUBLIC,CHAD,CHILE,CHINA,COLOMBIA,COMOROS,CONGO,CONGO THE DEMOCRATIC REPUBLIC OF THE,COOK ISLANDS,COSTA RICA,COTE D'IVOIRE,CROATIA (LOCAL NAME: HRVATSKA),CUBA,CURACAO,CYPRUS,CZECH REPUBLIC,DENMARK,DJIBOUTI,DOMINICA,DOMINICAN REPUBLIC,ECUADOR,EGYPT,EL SALVADOR,EQUATORIAL GUINEA,ERITREA,ESTONIA,ETHIOPIA,EUROPEAN UNION,FAROE ISLANDS,FIJI,FINLAND,FRANCE,FRENCH GUIANA,FRENCH POLYNESIA,GABON,GAMBIA,GEORGIA,GERMANY,GHANA,GIBRALTAR,GREECE,GREENLAND,GRENADA,GUADELOUPE,GUAM,GUATEMALA,GUERNSEY,GUINEA,GUINEA-BISSAU,GUYANA,HAITI,HOLY SEE (VATICAN CITY STATE),HONDURAS,HONG KONG,HUNGARY,ICELAND,INDIA,INDONESIA,IRAN (ISLAMIC REPUBLIC OF),IRAQ,IRELAND,ISLE OF MAN,ISRAEL,ITALY,JAMAICA,JAPAN,JERSEY,JORDAN,KAZAKHSTAN,KENYA,KIRIBATI,KOREA DEMOCRATIC PEOPLE'S REPUBLIC OF,KOREA REPUBLIC OF,KUWAIT,KYRGYZSTAN,LAO PEOPLE'S DEMOCRATIC REPUBLIC,LATVIA,LEBANON,LESOTHO,LIBERIA,LIBYAN ARAB JAMAHIRIYA,LIECHTENSTEIN,LITHUANIA,LUXEMBOURG,MACAU,MACEDONIA,MADAGASCAR,MALAWI,MALAYSIA,MALDIVES,MALI,MALTA,MARSHALL ISLANDS,MARTINIQUE,MAURITANIA,MAURITIUS,MAYOTTE,MEXICO,MICRONESIA FEDERATED STATES OF,MOLDOVA REPUBLIC OF,MONACO,MONGOLIA,MONTENEGRO,MONTSERRAT,MOROCCO,MOZAMBIQUE,MYANMAR,NAMIBIA,NAURU,NEPAL,NETHERLANDS,NEW CALEDONIA,NEW ZEALAND,NICARAGUA,NIGER,NIGERIA,NIUE,NON-SPEC ASIA PAS LOCATION,NORFOLK ISLAND,NORTHERN MARIANA ISLANDS,NORWAY,OMAN,PAKISTAN,PALAU,PALESTINIAN TERRITORY OCCUPIED,PANAMA,PAPUA NEW GUINEA,PARAGUAY,PERU,PHILIPPINES,POLAND,PORTUGAL,PUERTO RICO,QATAR,RESERVED,REUNION,ROMANIA,RUSSIAN FEDERATION,RWANDA,SAINT KITTS AND NEVIS,SAINT LUCIA,SAINT MARTIN,SAINT VINCENT AND THE GRENADINES,SAMOA,SAN MARINO,SAO TOME AND PRINCIPE,SAUDI ARABIA,SENEGAL,SERBIA,SEYCHELLES,SIERRA LEONE,SINGAPORE,SINT MAARTEN,SLOVAKIA (SLOVAK REPUBLIC),SLOVENIA,SOLOMON ISLANDS,SOMALIA,SOUTH AFRICA,SOUTH SUDAN,SPAIN,SRI LANKA,ST. PIERRE AND MIQUELON,SUDAN,SURINAME,SWAZILAND,SWEDEN,SWITZERLAND,SYRIAN ARAB REPUBLIC,TAIWAN; REPUBLIC OF CHINA (ROC),TAJIKISTAN,TANZANIA UNITED REPUBLIC OF,THAILAND,TIMOR-LESTE,TOGO,TOKELAU,TONGA,TRINIDAD AND TOBAGO,TUNISIA,TURKEY,TURKMENISTAN,TURKS AND CAICOS ISLANDS,TUVALU,UGANDA,UKRAINE,UNITED ARAB EMIRATES,UNITED KINGDOM,UNITED STATES,URUGUAY,UZBEKISTAN,VANUATU,VENEZUELA,VIET NAM,VIRGIN ISLANDS (BRITISH),VIRGIN ISLANDS (U.S.),WALLIS AND FUTUNA ISLANDS,YEMEN,ZAMBIA,ZIMBABWE";

            var allCountries = AllCountriesString.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            var firstCoupleCountries = allCountries.Take(2).ToArray();
            // Here i take only the first two countries for looping through, because there over four billion IP Addresses in the IPv4 protocol worldwide.
            // See more at https://en.wikipedia.org/wiki/List_of_countries_by_IPv4_address_allocation
            // You can find the output file the program main directory -> Selenium-WebDriver-Homework\CreateReportWithValidIpAddresses\output.txt

            foreach (var country in firstCoupleCountries)
            {
                using (var client = new WebClient())
                {
                    var preTagContent =
                        client.DownloadString("http://services.ce3c.be/ciprg/?countrys=" + country)
                              .Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

                    Console.WriteLine(new string('=', 80));
                    Console.WriteLine(country);
                    Console.WriteLine(new string('=', 80));

                    foreach (var ipRange in preTagContent.Select(currLine => currLine.Substring(country.Length + 1)))
                    {
                        Console.WriteLine(new string('=', 80));
                        Console.WriteLine("Current IP Range: {0}", ipRange);
                        Console.WriteLine(new string('=', 80));

                        var parsedRange = IPAddressRange.Parse(ipRange);
                        foreach (var ipAddress in parsedRange)
                        {
                            Console.WriteLine(ipAddress);
                        }
                    }
                }
            }
        }
    }
}